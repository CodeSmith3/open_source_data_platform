# Airflow common settings
x-airflow-common:
  &airflow-common
  image: apache/airflow:2.8.1-python3.11
  environment:
    &airflow-common-env
    # Core
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:${AIRFLOW_DB_PASSWORD:-airflow123}@gemeente_postgres:5432/airflow
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:-Zv8-bGq6UQ_B0K8eQf7WEjPfzKXyUJrSCxP9vXzjZIs=}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Europe/Amsterdam
    
    # Webserver
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    AIRFLOW__WEBSERVER__RBAC: 'true'
    AIRFLOW__WEBSERVER__BASE_URL: http://192.168.1.25:8082
    
    # API
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    
    # Scheduler
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    
    # Keycloak SSO
    KEYCLOAK_URL: ${KEYCLOAK_URL:-http://192.168.1.25:8085}
    KEYCLOAK_REALM: ${KEYCLOAK_REALM:-gemeente}
    AIRFLOW_OIDC_CLIENT_ID: ${AIRFLOW_OIDC_CLIENT_ID:-airflow}
    AIRFLOW_OIDC_CLIENT_SECRET: ${AIRFLOW_OIDC_CLIENT_SECRET:-airflow-client-secret}
    AIRFLOW_OIDC_ISSUER: ${AIRFLOW_OIDC_ISSUER}
    AIRFLOW_OIDC_AUTHORIZE_URL: ${AIRFLOW_OIDC_AUTHORIZE_URL}
    AIRFLOW_OIDC_TOKEN_URL: ${AIRFLOW_OIDC_TOKEN_URL}
    AIRFLOW_OIDC_USERINFO_URL: ${AIRFLOW_OIDC_USERINFO_URL}
    AIRFLOW_OIDC_JWKS_URL: ${AIRFLOW_OIDC_JWKS_URL}
    
    # Connections
    AIRFLOW_CONN_POSTGRES_DEFAULT: postgresql://gemeente:${POSTGRES_PASSWORD:-gemeente123}@gemeente_postgres:5432/gemeente
    AIRFLOW_CONN_MINIO_DEFAULT: aws://minioadmin:${MINIO_ROOT_PASSWORD:-minioadmin123}@?host=http://gemeente_minio:9000&region_name=us-east-1
    
    # Python path
    PYTHONPATH: /opt/airflow
    
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./config:/opt/airflow/config
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  # Database initialization
  airflow-init:
    <<: *airflow-common
    container_name: gemeente_airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # Install additional packages
        pip install --no-cache-dir \
          apache-airflow-providers-postgres \
          apache-airflow-providers-amazon \
          authlib \
          flask-openid
        
        # Initialize database
        airflow db migrate
        
        # Create admin user
        airflow users create \
          --username admin \
          --password ${AIRFLOW_ADMIN_PASSWORD:-admin123} \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@gemeente.nl || true
        
        echo "Airflow initialization complete!"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
    networks:
      - backend

  # Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: gemeente_airflow_webserver
    command: webserver
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - backend
    environment:
      <<: *airflow-common-env

  # Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: gemeente_airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - backend
    environment:
      <<: *airflow-common-env

networks:
  backend:
    external: true
    name: gemeente_data_platform_dev_backend

volumes:
  airflow_logs:
  airflow_plugins:
